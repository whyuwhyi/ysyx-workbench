# Sanity check
ifeq ($(wildcard $(NPC_HOME)/src/npc-main.cpp),)
  $(error NPC_HOME=$(NPC_HOME) is not a NPC repo)
endif

# Include variables and rules generated by menuconfig
# Note: if auto.conf doesn't exist, it will be created by defconfig rule
ifeq ($(wildcard include/config/auto.conf),)
$(info Generating default configuration...)
$(shell $(MAKE) -s defconfig)
endif

-include $(NPC_HOME)/include/config/auto.conf
-include $(NPC_HOME)/include/config/auto.conf.cmd

remove_quote = $(patsubst "%",%,$(1))

# NPC configuration
TOPNAME = ysyx_25030081_cpu
NAME = $(TOPNAME)
IMG ?= ../am-kernels/tests/cpu-tests/build/dummy-riscv32e-npc.bin

# Extract compiler and options from menuconfig
ifneq ($(CONFIG_CC),)
CC = $(call remove_quote,$(CONFIG_CC))
endif
CFLAGS_BUILD += $(call remove_quote,$(CONFIG_CC_OPT))
CFLAGS_BUILD += $(if $(CONFIG_CC_DEBUG),-Og -ggdb3,)
CFLAGS_BUILD += $(if $(CONFIG_CC_ASAN),-fsanitize=address,)
CFLAGS_TRACE += -DITRACE_COND=$(if $(CONFIG_ITRACE_COND),$(call remove_quote,$(CONFIG_ITRACE_COND)),true)
CFLAGS_BUILD += $(if $(CONFIG_WAVE_TRACE),-DCONFIG_WAVE_TRACE,)
CFLAGS_BUILD += $(if $(CONFIG_NVBOARD),-DCONFIG_NVBOARD,)

# Verilator configuration
VERILATOR = verilator
VERILATOR_CFLAGS += -MMD --build -cc -O3 --x-assign fast --x-initial fast --noassert --quiet-exit
BUILD_DIR = $(shell pwd)/build
OBJ_DIR = $(BUILD_DIR)/obj_dir
TARGET = $(BUILD_DIR)/$(TOPNAME)

$(shell mkdir -p $(BUILD_DIR))

# Include paths
INC_PATH = include
INCFLAGS = $(addprefix -I, $(abspath $(INC_PATH))) -I$(abspath ./src)
CXXFLAGS += $(INCFLAGS) -DTOP_NAME="\"V$(TOPNAME)\"" -ffile-prefix-map=$(abspath .)/=
CFLAGS  += $(CFLAGS_BUILD) $(CFLAGS_TRACE)
LDFLAGS += $(CFLAGS_BUILD)

# Filelist discovery and inclusion
FILELIST_MK = $(shell find -L ./src -name "filelist.mk")
include $(FILELIST_MK)

# Source files
VSRCS = $(shell find $(abspath ./vsrc) -name "*.v")
DIRS-y += src/monitor
DIRS-BLACKLIST-y += $(DIRS-BLACKLIST)
SRCS-BLACKLIST-y += $(SRCS-BLACKLIST) $(shell find -L $(DIRS-BLACKLIST-y) -name "*.c" -o -name "*.cc" -o -name "*.cpp" 2>/dev/null || true)
SRCS-y += $(shell find -L $(DIRS-y) -name "*.c" -o -name "*.cc" -o -name "*.cpp" 2>/dev/null || true)
SRCS = $(abspath $(filter-out $(SRCS-BLACKLIST-y),$(SRCS-y)))

# Add necessary libraries based on configuration
LIBS := 
LIBS += -lreadline
LIBS += $(if $(CONFIG_DIFFTEST),-ldl)
LIBS += $(if $(CONFIG_ITRACE),-ldl)

# Default target
.DEFAULT_GOAL := $(TARGET)

$(TARGET): $(VSRCS) $(SRCS) $(if $(CONFIG_NVBOARD),$(SRC_AUTO_BIND))
	@$(VERILATOR) $(VERILATOR_CFLAGS) \
		--top-module $(TOPNAME) $^ \
		$(addprefix -CFLAGS , $(CXXFLAGS)) $(addprefix -LDFLAGS , $(LDFLAGS) $(LIBS)) \
		--trace-fst \
		--Mdir $(OBJ_DIR) --exe -o $(abspath $(TARGET))


# NVBoard integration
ifneq ($(NVBOARD_HOME),)
include $(NVBOARD_HOME)/scripts/nvboard.mk

NXDC_FILES = constr/top.nxdc
SRC_AUTO_BIND = $(abspath ./build/auto_bind.cpp)

$(SRC_AUTO_BIND): $(NXDC_FILES)
	python3 $(NVBOARD_HOME)/scripts/auto_pin_bind.py $^ $@

# Add nvboard sources if enabled
ifeq ($(CONFIG_NVBOARD),y)
SRCS += $(SRC_AUTO_BIND)
LIBS += $(NVBOARD_ARCHIVE)
endif
endif

# Default arguments for simulation
override ARGS ?= --log=$(BUILD_DIR)/npc-log.txt
ARGS += $(NPCFLAGS)

# Simulation target for AM integration
sim: $(TARGET)
	@$(call git_commit, "sim RTL") 
	@$(TARGET) $(ARGS) $(IMG)

# Wave viewer
GTKWAVE = gtkwave
WAVE = ./build/wave.fst

wave: $(WAVE)
	@$(GTKWAVE) $(WAVE)

clean:
	rm -rf $(BUILD_DIR)

# Include rules for menuconfig
include $(NPC_HOME)/scripts/config.mk

# Add build target alias
build: $(TARGET)

include ../Makefile

.PHONY: build sim wave clean
